from pokefiche import request_data, request_cached_data
from md_to_html import convert
import sys
import os
import json
import matplotlib.pyplot as plt
from md_to_html import convert
import requests


def find_multiple_matches(name: str, data: dict) -> tuple:
    """
    Scanne chaque √©l√©ment du cache jusqu'√† trouver le nom
    correspondant √† l'entr√©e utilisateur et renvoie l'url. Si aucun r√©sultat exact n'est trouv√©,
    un dictionnaire de tous les r√©sultats ainsi que les urls est renvoy√©.
    La fonction renvoie un tuple qui contient ce dictionnaire et un mot cl√© correspondant √†
    l'√©tat des r√©sultats par rapport √† l'entr√©e utilisateur (unknown, full et partial).

    - name : Entr√©e utilisateur [str]
    - data : Le fichier contenant tous les lieux [dict]
    """
    matches = {"results": [], "urls": []}
    count = data['count']

    for i in range(count):
        if name == data['results'][i]['name']:
            return ("full", data['results'][i]['url'])
        elif name in data['results'][i]['name']:
            matches['results'].append(data['results'][i]['name'])
            matches['urls'].append(data['results'][i]['url'])
    
    if not matches['results']:
        return "unknown", ""
    else:
        return ("partial", matches)

def get_pkmn_types(data: dict) -> list:
    """
    R√©cup√®re les types du Pok√©mon en fran√ßais.

    - data : Donn√©es du Pok√©mon [dict]
    """    
    en_types = []
    fr_types = []
    url_types = ""

    for i in range(len(data['types'])):
        """current_type = data['types'][i]['type']['name']
        current_url = data['types'][i]['type']['url']
        pkmn_types = request_cached_data(current_url, f"type-{en_types[i]}.json", verbose=verbose_value)
        types_dict[current_type] = pkmn_types['names'][3]['name']"""

        en_types.append(data['types'][i]['type']['name'])
        url_types = data['types'][i]['type']['url']
        pkmn_types = request_cached_data(url_types, f"type-{en_types[i]}.json", verbose=verbose_value)

        fr_types.append(pkmn_types['names'][3]['name'])

    return fr_types

def get_pkmn_sprite(data: dict) -> str:
    """
    R√©cup√®re l'url du sprite du Pok√©mon.
    
    - data : Donn√©es du Pok√©mon [str]
    """
    return data['sprites']['other']['official-artwork']['front_default']

def get_pkmn_stats(data: dict) -> dict:
    """
    Affiche chaque stat d'un Pok√©mon en fran√ßais.
    
    - data : Donn√©es du Pok√©mon [str]
    """
    stats_dict = {}

    for i in range(6):
        
        stat_value = data['stats'][i]['base_stat']
        en_stat_name = data['stats'][i]['stat']['name']
        
        url = data['stats'][i]['stat']['url']
        stat = request_cached_data(url, f"stat-{en_stat_name}.json", verbose=verbose_value)
        fr_stat_name = stat['names'][3]['name']

        # if en_stat_name not in stats_dict:      Initialisation du dictionnaire
        stats_dict[en_stat_name] = {'fr_name': "", 'stat_value': 0}

        stats_dict[en_stat_name]['fr_name'] = fr_stat_name
        stats_dict[en_stat_name]['stat_value'] = stat_value
        
        # print(f"{fr_stat_name} : {stat_value}")
    
    return stats_dict

def get_pkmn_name(data: dict) -> str:
    """
    R√©cup√®re le nom fran√ßais d'un Pok√©mon.
    
    - data : donn√©es du Pok√©mon [dict]
    """
    en_name = data['name']
    url = data['species']['url']
    pkmn = request_cached_data(url, f"{en_name}-species.json", verbose=verbose_value)   # On fait une requ√™te vers l'esp√®ce pour
    fr_name = pkmn['names'][4]['name']                              # obtenir des donn√©es avanc√©es -> la traduction en fr
                                                                    # du nom du Pok√©mon
    return fr_name

def get_area_name(data: dict) -> str:
    """
    R√©cup√®re le nom d'un lieu en fran√ßais.
    L'emplacement du nom fran√ßais peut varier et ne pas exister donc on veille √†
    ce que dans le pire des cas, le nom anglais soit affich√©.
    
    - data : donn√©es du lieu [str]
    """
    formatted_name = data['name']
    
    if len(data['names']) > 0:
        for i in range(len(data['names'])):
            if data['names'][i]['language']['name'] == "fr":
                fr_area_name = data['names'][i]['name']
                return fr_area_name
            elif data['names'][i]['language']['name'] == "en":
                en_area_name = data['names'][i]['name']
        
        return en_area_name

def get_encounter_method(data: dict, mode: str) -> str:
    """
    R√©cup√®re la m√©thode de rencontre du pok√©mon.

    - data : donn√©es du Pok√©mon
    - mode : Retourne le nom simple ou le nom complet en fran√ßais
    """
    simple_encounter_method = data['pokemon_encounters'][0]['version_details'][-1]['encounter_details'][0]['method']['name']
    if mode == "simple":
        return simple_encounter_method
    else:
        encounter_method = request_cached_data(data['pokemon_encounters'][0]['version_details'][-1]['encounter_details'][0]['method']['url'], f"{simple_encounter_method}.json", verbose=verbose_value)

        for i in range(len(encounter_method['names'])):
            if encounter_method['names'][i]['language']['name'] == "fr":
                return encounter_method['names'][i]['name']     # Nom complet en fran√ßais
            elif encounter_method['names'][i]['language']['name'] == "en":
                en_encounter_name = encounter_method['names'][i]['name']
        
        return en_encounter_name    # Si le nom complet fran√ßais n'est pas trouv√©, on renvoie le nom anglais

def get_dataset(name: str, root_data) -> dict:
    """
    Le fonction trouve tous les Pok√©mons rencontrables pour le lieu entr√©
    par l'utilisateur.
    Elle envoie poke_dict qui contient des noms de Pok√©mons, leur stats et leur m√©thode de rencontre.
    Ce dictionnaire est ensuite utilis√© par compute_statistics(poke_dict) pour faire des statistiques.

    - name : le nom du lieu entr√© par l'utilisateur [str]
    - root_data : le fichier contenant le dictionnaire des lieux [dict]
    """
    formatted_place = name.replace(" ", "-").replace(".", "").lower()  # Formate le texte pour enlever les caract√®res g√©nants
    place_url = find_multiple_matches(formatted_place, root_data)

    if place_url[0] == "unknown":
        print("‚ùå Lieu inconnu...")
        sys.exit()
    elif place_url[0] == "partial":
        
        url_count = len(place_url[1]['results'])
        print(f"üìã {url_count} Lieux trouv√©s\n")
        i = 1
        for name in place_url[1]['results']:  # Affichage des r√©sultats possibles
            print(f"{i}: {name.replace('-', ' ')}")
            i += 1

        while 1:
            # Pour recommencer en cas de typo sur usr_choice (pas un entier, pas dans la plage autoris√©e)

            try:
                usr_choice = int(input("\n[int] Entrez le lieu souhait√© : "))
            except ValueError:
                # L'entr√©e utilisateur n'est pas un entier
                print("\n‚ùå Entrez un entier")
            else:
                # Hors de la plage autoris√©e
                if not(1 <= usr_choice <= url_count):
                    print("\n‚ùå Entr√©e invalide")
                else:
                    # Tout va bien √† bord, alors on remplace la saisie utilisateur et l'url par le lieu s√©lectionn√©
                    formatted_place = place_url[1]['results'][usr_choice-1]
                    place_url = place_url[1]['urls'][usr_choice-1]
                    break

    else:
        place_url = place_url[1]
        print("‚úÖ Lieu trouv√© !")
    print()

    # Le programme trouve le nom fran√ßais et it√®re sur le sous-fichier pour trouver chaque zone (sous-lieu)

    place = request_cached_data(place_url, f"{formatted_place}.json", verbose=verbose_value)

    fr_place_name = get_area_name(place)
    print("==============================")
    print(fr_place_name)
    print("==============================\n")

    sub_area_list = []

    for i in range(len(place['areas'])):
        sub_area_list.append(place['areas'][i]['url'])

    # R√©cup√®re les infos sur les Pok√©mons en it√©rant sur la liste obtenue

    wait = input(f"[Entr√©e] Affichage des Pok√©mons de la zone...")
    print()

    poke_dict = {
        'pokemons': {},
        'place_info': {}
    }

    for i in range(len(place['areas'])):
        # Parcourt les sous-lieux
        sub_area_name = place['areas'][i]['name']
        sub_area_url = place['areas'][i]['url']
        sub_area = request_cached_data(sub_area_url, f"{sub_area_name}.json", verbose=verbose_value)

        for x in range(len(sub_area['pokemon_encounters'])):
            # Parcourt les pok√©mons rencontrables
            pkmn_name = sub_area['pokemon_encounters'][x]['pokemon']['name']
            pkmn_url = sub_area['pokemon_encounters'][x]['pokemon']['url']


            if pkmn_name not in poke_dict:
                # Si le Pok√©mon est d√©j√† affich√©, on l'ignore. Sinon, on l'affiche
                pkmn = request_cached_data(pkmn_url, f"{pkmn_name}.json", verbose=verbose_value)
                
                # On r√©cup√®re les donn√©es

                region_name = place['region']['name']

                fr_pkmn_name = get_pkmn_name(pkmn)
                pkmn_types = get_pkmn_types(pkmn)
                pkmn_sprite = get_pkmn_sprite(pkmn)
                pkmn_encounter_simple = get_encounter_method(sub_area, "simple")
                pkmn_encounter_complete = get_encounter_method(sub_area, "complete")
                pkmn_stats = get_pkmn_stats(pkmn)
                pkmn_id = pkmn['id']

                poke_dict[pkmn_name] = {}

                # On affiche les donn√©es r√©cup√©r√©es √† l'utilisateur dans le terminal

                print(f"‚ñ∂ {fr_pkmn_name}")
                print(pkmn_encounter_complete)
                print(f"Type(s) : ", end="")
                for _type in pkmn_types:
                    print(_type, end=" ")   # Pour que les types s'affichent sur une seule ligne (avec un espace)
                print()     # Pour sauter une ligne car les print pr√©c√©dents ne retournent pas √† la ligne

                # On ajoute les donn√©es √† poke_dict pour pouvoir les traiter par la suite

                poke_dict['place_info'] = [fr_place_name, region_name]

                if pkmn_name not in poke_dict['pokemons']:
                    poke_dict['pokemons'][pkmn_name] = {}
                
                poke_dict['pokemons'][pkmn_name]['id'] = pkmn_id
                poke_dict['pokemons'][pkmn_name]['fr_name'] = fr_pkmn_name
                poke_dict['pokemons'][pkmn_name]['types'] = pkmn_types
                poke_dict['pokemons'][pkmn_name]['sprite'] = pkmn_sprite
                poke_dict['pokemons'][pkmn_name]['encounter'] = pkmn_encounter_complete
                for stat_name, stat_data in pkmn_stats.items():
                    poke_dict['pokemons'][pkmn_name][stat_data['fr_name']] = stat_data['stat_value']
                    print(f"{stat_data['fr_name']} : {stat_data['stat_value']}")

                print("------------------------------")    # S√©parateur

    print("\n‚úÖ Recherche termin√©e !")
    if len(poke_dict['pokemons']) == 0:
        print(f"\n‚ö†Ô∏è  Aucun Pok√©mon trouv√© pour ce lieu.")
    else:
        print(f"\n{len(poke_dict['pokemons'])} Pok√©mons trouv√©s pour ce lieu.")
    
    return poke_dict

def compute_statistics(poke_dict: dict, filename: str) -> None:
    """
    Calcule des statistiques sur les Pok√©mon.

    - poke_dict : dictionnaire donn√©es Pok√©mon [dict]
    - filename : nom du fichier diagramme g√©n√©r√© [str]
    """

    types_sorted = {
        'Insecte': 0,
        'T√©n√®bres': 0,
        'Dragon': 0,
        'Elektrik': 0,
        'F√©e': 0,
        'Combat': 0,
        'Feu': 0,
        'Vol': 0,
        'Spectre': 0,
        'Plante': 0,
        'Sol': 0,
        'Glace': 0,
        'Normal': 0,
        'Poison': 0,
        'Psy': 0,
        'Roche': 0,
        'Acier': 0,
        'Eau': 0,
    }

    # Couleurs pour le diagramme circulaire
    color_map = {
    'Insecte': '#a8b820',  # Vert olive
    'T√©n√®bres': '#403934',  # Marron sombre (p√¢le)
    'Dragon': '#7038f8',  # Violet
    '√âlectrik': '#f8d030',  # Jaune
    'F√©e': '#ee99ac',  # Rose clair
    'Combat': '#c03028',  # Maroon 
    'Feu': '#f08030',  # Orange
    'Vol': '#a890f0',  # Violet clair
    'Spectre': '#705898',  # Violet p√¢le
    'Plante': '#78C850',  # Vert
    'Sol': '#e0c068',  # Ocre
    'Glace': '#98d8d8',  # Bleu clair
    'Normal': '#b3b391',  # Beige
    'Poison': '#a040a0',  # Fuschia
    'Psy': '#f85888',  # Rose
    'Roche': '#b8a038',  # Marron clair
    'Acier': '#b8b8d0',  # Gris
    'Eau': '#6890f0'   # Bleu
    }
    
    for key, value in poke_dict['pokemons'].items():
    # V√©rifier que 'types' existe dans l'entr√©e actuelle
        if 'types' in value and isinstance(value['types'], list):
            for type_ in value['types']:
                if type_ in types_sorted:
                    types_sorted[type_] += 1
                else:
                    # Si le type n'est pas dans types_sorted, l'initialiser √† 1
                    types_sorted[type_] = 1

    # Cr√©ation du diagramme circulaire pr√©sentant la r√©partition des types :

    filtered_types = {}
    for type_, value in types_sorted.items():   # Pour √©liminer les types ayant un indice √† 0 du diagramme
        if value > 0:
            filtered_types[type_] = value

    labels = list(filtered_types.keys())
    sizes = list(filtered_types.values())
    colors = [color_map[type_name] for type_name in labels]

    plt.figure(figsize=(7, 7))
    plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=45)

    plt.title("")
    plt.show
    plt.savefig(f'./pokestats/{filename}', dpi=300, bbox_inches='tight')


def dataset_to_md(poke_dict: dict, filename: str, diagram_name: str) -> None:
    """
    G√©n√®re un fichier Markdown pour les statistiques de r√©partition de types.
    
    - filename : nom du fichier Markdown [str]
    - poke_dict : toutes les donn√©es utiles [dict]
    - diagram_name : le nom du fichier diagramme [str]
    """

    with open(filename, 'w', encoding="utf-8") as md:
        md.write('# Pok√©Radar - Pok√©Stats\n\n')
        md.write('\n[SAE 15] DAIRIN C√¥me | SCHER Florian\n\n')
        md.write(f'# {poke_dict['place_info'][0]}\n\n')
        md.write(f'### - R√©gion : {poke_dict['place_info'][1].capitalize()}\n\n')
        md.write('## Pok√©mons capturables\n\n')
                
        for key, value in poke_dict['pokemons'].items():
            types_str = " ".join(poke_dict['pokemons'][key]['types'])
            
            md.write(f'### ‚ñ∂ [{poke_dict['pokemons'][key]['id']}] {poke_dict['pokemons'][key]['fr_name']} :\n')
            md.write(f'| Pok√©mon | Type | PV | Attaque | D√©fense | Attaque Sp√©. | D√©fense Sp√©. | Vitesse | Capture |\n')
            md.write(f'| :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | -: |\n')
            md.write(f"| <img src={poke_dict['pokemons'][key]['sprite']} width='100px'> | {types_str} | {poke_dict['pokemons'][key]['PV']} | {poke_dict['pokemons'][key]['Attaque']} | {poke_dict['pokemons'][key]['D√©fense']} | {poke_dict['pokemons'][key]['Attaque Sp√©ciale']} | {poke_dict['pokemons'][key]['D√©fense Sp√©ciale']} | {poke_dict['pokemons'][key]['Vitesse']} | {poke_dict['pokemons'][key]['encounter']} |\n\n")
        
        md.write('## R√©partition des types\n\n')
        md.write(f"<img src='{diagram_name}' width='400px'>")
        

def infos_locales(en_place_name: str) -> None:
    """
    G√©n√®re un fichier Markdown et HTML des statistiques.

    - en_place_name : nom du lieu en anglais [str]
    """
    try:
        os.mkdir("cache")       # On cr√©e le r√©pertoire cache
        if verbose_value==True:
            print("Cr√©ation du r√©pertoire : cache")
    except FileExistsError:     # S'il existe d√©j√†, on ignore l'erreur
        pass
    except PermissionError:
        print(f"‚ùå  Permission non accord√©e. Ne peut pas cr√©er le cache.\n")
    # On cr√©e le r√©pertoie pokestats
    try:
        os.mkdir("pokestats")
        if verbose_value==True:
            print("Cr√©ation du r√©pertoire : pokestats")
    except FileExistsError:
        pass
    except PermissionError:
        print(f"‚ùå Erreur : permission non accord√©e. Ne peut pas cr√©er le dossier pokefiche.")

    root_data = request_cached_data("https://pokeapi.co/api/v2/location/", "root_place_file.json", 9999, verbose=verbose_value)     # Dictionnaire des lieux
    poke_dict = get_dataset(en_place_name, root_data)

    stats = compute_statistics(poke_dict, f"diagram-{en_place_name.replace(" ", "_")}.png")
    diagram_name = f'diagram-{en_place_name.replace(" ", "_")}.png'
    md_filename, html_filename = f'{en_place_name.replace(" ", "_")}.md', f'{en_place_name.replace(" ", "_")}.html'
    
    dataset_to_md(poke_dict, f"./pokestats/{md_filename}", diagram_name)
    print(f"\nStatistiques g√©n√©r√©es : {md_filename}")
    convert( f"./pokestats/{md_filename}",  f"./pokestats/{html_filename}")
    print(f"Statistiques g√©n√©r√©es : {html_filename}\n")

if __name__ == "__main__":
    global verbose_value
    print(
"""
 __   __        ___  __   __   __   __   __  
|__) /  \\ |__/ |__  |__) |__| |  \\ |__| |__) 
|    \\__/ |  \\ |___ |  \\ |  | |__/ |  | |  \\
"""
    )

    print(r"\\\\\\\\\\\\\\\\\\\\\\ Pok√©Radar v1.0 Part 1")
    print("---------------------- SAE 15 [2.2]")
    print("////////////////////// C√¥me et Florian\n")

    print('Utilisation : python3 stats.py --verbose=[y|n] <pokemon_place>\n')

    place = " ".join(sys.argv[2:])      # On doit convertir tous les arguments apr√®s --verbose=[y|n] pour
                                        # obtenir le nom du lieu recherch√©
    if "--verbose=y" in sys.argv[1]:
        verbose_value = True
        try:
            infos_locales(place)
        except requests.exceptions.ConnectionError:
            print("‚ùå Connexion refus√©e.\n")
        except requests.exceptions.HTTPError:
            print("‚ùå La requ√™te est invalide.\n")
        except requests.exceptions.Timeout:
            print("‚ùå La requ√™te a expir√©.\n")
        except json.decoder.JSONDecodeError:
            print("‚ùå Une erreur est survenue.\n")
            print("> Essayez de vider le cache\n")
    elif "--verbose=n" in sys.argv[1]:
        verbose_value = False
        try:
            infos_locales(place)
        except requests.exceptions.ConnectionError:
            print("‚ùå Connexion refus√©e.\n")
        except requests.exceptions.HTTPError:
            print("‚ùå La requ√™te est invalide.\n")
        except requests.exceptions.Timeout:
            print("‚ùå La requ√™te a expir√©.\n")
        except json.decoder.JSONDecodeError:
            print("‚ùå Une erreur est survenue.\n")
            print("> Essayez de vider le cache\n")
    else:
        print(f'‚ùå Erreur : argument inattendu "{sys.argv[1]}"\n\nUtilisation : python3 stats.py --verbose=[y|n] <pokemon_place>\n')
