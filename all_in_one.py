import requests
import markdown
import json
import os
import matplotlib.pyplot as plt


def get_dataset(url: str, limit: int) -> dict:
    """
    Fait une requ√™te vers l'API. Retourne les donn√©es r√©cup√©r√©es au format json.

    - url : url vers la requ√™te [str]
    - limit : limite d'affichage d'√©l√©ments [int]
    """
    url = f"{url}?limit={limit}"
    response = requests.get(url)
    data = response.json()
    return data


def get_data_cached(url: str, limit: int, name: str) -> dict:
    """
    Met en cache les donn√©es si elles ne sont pas dans le cache.
    
    - url : url vers la requ√™te [str]
    - limit : limite d'affichage d'√©l√©ments [int]
    - name : nom du fichier cache [str]
    """
    if os.path.isfile(f'cache/{name}'):
        # Si le cache est pr√©sent on charge les donn√©es
        with open(f'cache/{name}', "r") as f:
            file_content = json.load(f)
        f.close()
        return file_content

    elif not os.path.isfile(f'cache/{name}'):
        # Si le cache n'existe pas on le cr√©e
        data = get_dataset(url, limit)
        with open(f'cache/{name}', "w") as f:
            file_content = json.dump(data, f)
        f.close()
        return data

def find_place_url(name) -> str:
    """
    Scanne chaque √©l√©ment du cache jusqu'√† trouver le nom
    correspondant √† l'entr√©e utilisateur. L'url est renvoy√©e.

    - name : entr√©e utilisateur
    """
    count = root_file['count']

    for i in range(count):
        if root_file['results'][i]['name'] == name:
            return root_file['results'][i]['url']
    
    return "unknown"

def find_multiple_matches(name: str) -> tuple:
    """
    Scanne chaque √©l√©ment du cache jusqu'√† trouver le nom
    correspondant √† l'entr√©e utilisateur et renvoie l'url. Si aucun r√©sultat exact n'est trouv√©,
    un dictionnaire de tous les r√©sultats ainsi que les urls est renvoy√©.
    La fonction renvoie un tuple qui contient ce dictionnaire et un mot cl√© correspondant √†
    l'√©tat des r√©sultats par rapport √† l'entr√©e utilisateur (unknown, full et partial).

    - name : entr√©e utilisateur
    """
    matches = {"results": [], "urls": []}
    count = root_file['count']

    for i in range(count):
        if name == root_file['results'][i]['name']:
            return ("full", root_file['results'][i]['url'])
        elif name in root_file['results'][i]['name']:
            matches['results'].append(root_file['results'][i]['name'])
            matches['urls'].append(root_file['results'][i]['url'])
    
    if not matches['results']:
        return "unknown", ""
    else:
        return ("partial", matches)

def get_encounter_method(data: dict, index: int, mode: str) -> str:
    """
    R√©cup√®re la m√©thode de rencontre du pok√©mon.

    - data : donn√©es du Pok√©mon
    - index : index du Pok√©mon dans data['pokemon_encounters']
    - mode : Retourne le nom simple ou le nom complet en fran√ßais
    """
    simple_encounter_method = data['pokemon_encounters'][index]['version_details'][-1]['encounter_details'][0]['method']['name']
    if mode == "simple":
        return simple_encounter_method
    else:
        encounter_method = get_data_cached(data['pokemon_encounters'][index]['version_details'][-1]['encounter_details'][0]['method']['url'], 0, f"{simple_encounter_method}.json")

        for i in range(len(encounter_method['names'])):
            if encounter_method['names'][i]['language']['name'] == "en":
                en_encounter_name = encounter_method['names'][i]['name']
            elif encounter_method['names'][i]['language']['name'] == "fr":
                return encounter_method['names'][i]['name']     # Nom complet en fran√ßais
        
        return en_encounter_name    # Si le nom complet fran√ßais n'est pas trouv√©, on renvoie le nom anglais

def get_pkmn_types(data: dict) -> list:
    """
    R√©cup√®re le type du Pok√©mon en fran√ßais.
    Le cache attendu est celui du Pok√©mon.

    """
    en_types = []
    fr_types = []
    url_types = ""
    for i in range(len(data['types'])):
        en_types.append(data['types'][i]['type']['name'])
        url_types = data['types'][i]['type']['url']
        pkmn_types = get_data_cached(url_types, 0, f"{en_types[i]}.json")

        fr_types.append(pkmn_types['names'][3]['name'])

    return fr_types

def get_pkmn_sprite(data: dict) -> str:
    """
    R√©cup√®re l'url du sprite du Pok√©mon.
    Le cache attendu est celui du Pok√©mon.
    """
    return data['sprites']['other']['official-artwork']['front_default']

def get_pkmn_stats(data: dict) -> dict:
    """
    Affiche chaque stat d'un Pok√©mon en fran√ßais.
    Le cache attendu est celui du Pok√©mon.
    """
    stats_dict = {}

    for i in range(6):
        
        stat_value = data['stats'][i]['base_stat']
        en_stat_name = data['stats'][i]['stat']['name']
        
        url = data['stats'][i]['stat']['url']
        stat = get_data_cached(url, 0, f"{en_stat_name}.json")
        fr_stat_name = stat['names'][3]['name']

        if en_stat_name not in stats_dict:      # Initialisation du dictionnaire
            stats_dict[en_stat_name] = {'fr_name': "", 'stat_value': 0}

        stats_dict[en_stat_name]['fr_name'] = fr_stat_name
        stats_dict[en_stat_name]['stat_value'] = stat_value
        
        # print(f"{fr_stat_name} : {stat_value}")
    
    return stats_dict

def get_pkmn_name(data: dict) -> str:
    """
    R√©cup√®re le nom d'un Pok√©mon en fran√ßais.
    
    - data : donn√©es de la requ√™te
    """
    en_name = data['name']
    url = data['species']['url']
    pkmn = get_data_cached(url, 0, f"{en_name}-species.json")
    fr_name = pkmn['names'][4]['name']

    return fr_name

def get_area_name(data: dict) -> None:
    """
    Affiche le nom d'un lieu en fran√ßais.
    L'emplacement du nom fran√ßais peut varier et ne pas exister donc on veille √†
    ce que, dans le pire des cas, le nom anglais soit affich√©.
    
    - data : donn√©es de la requ√™te
    """
    formatted_name = data['name']
    
    if len(data['names']) > 0:
        for i in range(len(data['names'])):
            if data['names'][i]['language']['name'] == "fr":
                fr_area_name = data['names'][i]['name']
                return fr_area_name
            elif data['names'][i]['language']['name'] == "en":
                en_area_name = data['names'][i]['name']
        
        return en_area_name
    
    return formatted_name.replace("-", " ")

def dataset_to_md(data: dict, filename: str) -> None:
    """
    Cr√©e un fichier Markdown.

    - data : donn√©es
    - filename : nom du fichier √† cr√©er
    """
    with open(filename, "w") as md:
        md.write()


# Affichage sympa lors du lancement

print(
    """
 __   __        ___  __   __   __   __   __  
|__) /  \ |__/ |__  |__) |__| |  \ |__| |__) 
|    \__/ |  \ |___ |  \ |  | |__/ |  | |  \\
    """
    )

print(r"\\\\\\\\\\\\\\\\\\\\\\ Pok√©Radar v1.0")
print("---------------------- SAE 15 [2.2]")
print(r"////////////////////// C√¥me et Florian")
print()

# Initialisation des variables globales

global root_file

while 1:
    """
    Boucle infinie pour entrer des lieux √† la cha√Æne
    """

    # On cr√©e le r√©pertoire cache
    try:
        os.mkdir("cache")
    except FileExistsError:
        pass
    except PermissionError:
        print(f"‚ö†Ô∏è Permission non accord√©e. Ne peut pas cr√©er le cache")
    except Exception as e:
        pass

    # On cr√©e le cache principal

    root_file = get_data_cached("https://pokeapi.co/api/v2/location/", 1036, "root.json")

    # L'utilisateur entre un nom de lieu
    
    en_place_name = input("\nEntrez un nom de lieu : ")

    # Formate le texte pour enlever les caract√®res g√©nants

    formatted_place = en_place_name.replace(" ", "-").replace(".", "").lower()

    # Le programme it√®re sur root_file['results'][i]['name'] pour trouver l'url exacte ou une liste de r√©sultats
    
    place_url = find_multiple_matches(formatted_place)

    print()
    if place_url[0] == "unknown":
        print("‚ùå Lieu inconnu...")
        continue    # Si le lieu est inconnu, on redemande un lieu
    elif place_url[0] == "partial":
        
        url_count = len(place_url[1]['results'])
        print(f"üìã {url_count} Lieux trouv√©s\n")
        i = 1
        for name in place_url[1]['results']:  # Affichage des r√©sultats possibles
            print(f"{i}: {name.replace('-', ' ')}")
            i += 1
        
        while 1:
            # Pour recommencer en cas de typo sur usr_choice (pas un entier, pas dans la plage autoris√©e)

            try:
                usr_choice = int(input("\n[int] Entrez le lieu souhait√© : "))
            except ValueError:
                # L'entr√©e utilisateur n'est pas un entier
                print("\n‚ùå Entrez un entier")
            else:
                # Hors de la plage autoris√©e
                if not(1 <= usr_choice <= url_count):
                    print("\n‚ùå Entr√©e invalide")
                else:
                    # Tout va bien √† bord, alors on remplace la saisie utilisateur et l'url par le lieu s√©lectionn√©
                    formatted_place = place_url[1]['results'][usr_choice-1]
                    place_url = place_url[1]['urls'][usr_choice-1]
                    break

    else:
        place_url = place_url[1]
        print("‚úÖ Lieu trouv√© !")
    print()

    # Le programme trouve le nom fran√ßais et it√®re sur le sous-fichier pour trouver chaque zone (sous-lieu)

    place = get_data_cached(place_url, 0, f"{formatted_place}.json")

    fr_place_name = get_area_name(place)
    print("==============================")
    print(fr_place_name)
    print("==============================\n")

    sub_area_list = []

    for i in range(len(place['areas'])):
        sub_area_list.append(place['areas'][i]['url'])

    # R√©cup√®re les infos sur les Pok√©mons en it√©rant sur la liste obtenue

    wait = input(f"[Entr√©e] Affichage des Pok√©mons de la zone...")
    print()

    poke_dict = {}

    for i in range(len(place['areas'])):
        # Parcourt les sous-lieux
        sub_area_name = place['areas'][i]['name']
        sub_area_url = place['areas'][i]['url']
        sub_area = get_data_cached(sub_area_url, 0, f"{sub_area_name}.json")

        for x in range(len(sub_area['pokemon_encounters'])):
            # Parcourt les pok√©mons rencontrables
            pkmn_name = sub_area['pokemon_encounters'][x]['pokemon']['name']
            pkmn_url = sub_area['pokemon_encounters'][x]['pokemon']['url']


            if pkmn_name not in poke_dict:
                # Si le Pok√©mon est d√©j√† affich√©, on l'ignore. Sinon, on l'affiche
                pkmn = get_data_cached(pkmn_url, 0, f"{pkmn_name}.json")
                
                fr_pkmn_name = get_pkmn_name(pkmn)
                pkmn_types = get_pkmn_types(pkmn)
                pkmn_sprite = get_pkmn_sprite(pkmn)
                pkmn_encounter_simple = get_encounter_method(sub_area, 0, "simple")
                pkmn_encounter_complete = get_encounter_method(sub_area, 0, "complete")
                pkmn_stats = get_pkmn_stats(pkmn)

                poke_dict[pkmn_name] = {}

                print("‚ñ∂", end=" ")
                print(fr_pkmn_name)
                print(pkmn_encounter_complete)
                print(f"Type(s) : ", end="")
                for _type in pkmn_types:
                    print(_type, end=" ")    # Pour que les types s'affichent sur une seule ligne (avec un espace)
                print()     # Pour sauter une ligne car les print pr√©c√©dents ne retournent pas √† la ligne

                poke_dict[pkmn_name]['fr_name'] = fr_pkmn_name
                poke_dict[pkmn_name]['types'] = pkmn_types
                poke_dict[pkmn_name]['sprite'] = pkmn_sprite
                poke_dict[pkmn_name]['encounter'] = pkmn_encounter_simple
                for stat_name, stat_data in pkmn_stats.items():
                    poke_dict[pkmn_name][stat_data['fr_name']] = stat_data['stat_value']
                    print(f"{stat_data['fr_name']} : {stat_data['stat_value']}")


                # stats_dict[en_stat_name]['fr_name'] = fr_stat_name
                # stats_dict[en_stat_name]['stat_value'] = stat_value

                print("------------------------------")    # S√©parateur

    if len(poke_dict) == 0:
        print(f"\n‚ö†Ô∏è  Aucun Pok√©mon trouv√© pour ce lieu.")
    else:
        print(f"\n{len(poke_dict)} Pok√©mons trouv√©s pour ce lieu.")
        
    print("\n‚úÖ Termin√© !")

    with open(f"fiche-{formatted_place}.md", "w") as md:
        md.write("# Fiche Pok√©Radar\n")
        md.write("```\n[SAE 15]\nDAIRIN C√¥me\nSCHER Florian\n```\n")
        md.write(f"## {fr_place_name}\n")
        md.write(f"R√©gion : {place['region']['name']}\n")
